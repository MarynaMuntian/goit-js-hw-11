{"version":3,"sources":["color-switch.js","timer.js","promisification.js","index.js"],"names":["startButton","document","querySelector","stopButton","body","timerId","getRandomHexColor","Math","floor","random","toString","disabled","backgroundColor","style","onClickStart","setInterval","onClickStop","clearInterval","addEventListener","dateSelector","getElementById","days","hours","minutes","seconds","console","log","value","startButtonActive","Timer","constructor","onTick","intervalId","isActive","start","finishTime","textContent","currentTime","Date","now","deltaTime","time","convertMs","stop","ms","pad","hour","minute","second","String","padStart","timer","updateTimerField","bind","delay","Promise","resolve","reject","setTimeout","logger","then","users","name","active","toggleUserState","allUsers","username","map","user","table","randomIntegerFromInterval","min","max","makeTransaction","transaction","id","logSuccess","logError","warn","amount","catch"],"mappings":"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","file":"src.e145b6bd.js","sourceRoot":"../src","sourcesContent":["const startButton = document.querySelector('[data-start]');\nconst stopButton = document.querySelector('[data-stop]');\nconst body = document.querySelector('body');\nlet timerId = null;\nstopButton.disabled = true;\n\nfunction getRandomHexColor() {\n  return `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n}\n\nconst backgroundColor = () => {\n    return body.style.backgroundColor = getRandomHexColor();\n}\n\nconst onClickStart = () => {\n    timerId = setInterval(backgroundColor, 1000);\n    stopButton.disabled = false;\n    startButton.disabled = true;\n};\n\nconst onClickStop = () => {\n    clearInterval(timerId);\n    stopButton.disabled = true;\n    startButton.disabled = false;\n};\n\nstartButton.addEventListener('click', onClickStart);\nstopButton.addEventListener('click', onClickStop);\n\n","const dateSelector = document.getElementById('date-selector');\nconst startButton = document.querySelector('[data-start]');\nconst days = document.querySelector('[data-days]');\nconst hours = document.querySelector('[data-hours]');\nconst minutes = document.querySelector('[data-minutes]');\nconst seconds = document.querySelector('[data-seconds]');\n\nstartButton.disabled = true;\nconsole.log(dateSelector.value);\nconst startButtonActive = () => {\n    if (!dateSelector.value) {\n        return\n    }\n    startButton.disabled = false;\n};\nstartButtonActive();\n\nclass Timer {\n    constructor({ onTick}) {\n        this.intervalId = null;\n        this.isActive = false;\n        this.onTick = onTick;\n    }\n    start() {\n        // if (this.isActive) {\n        //     return;\n        //  }\n\n        const finishTime = dateSelector.textContent;\n\n        this.isActive = true;\n        this.intervalId = setInterval(() => {\n            const currentTime = Date.now();\n            const deltaTime = finishTime - currentTime;\n            const time = this.convertMs(deltaTime);\n            this.onTick(time);\n        }, 1000);\n    }\n    stop() {\n        const finishTime = dateSelector.textContent;\n        const currentTime = Date.now();\n        const deltaTime = finishTime - currentTime;\n        if (deltaTime === 0) {\n            clearInterval(this.intervalId);\n            this.isActive = false;\n        }\n        return;\n    }\n    convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = this.pad(Math.floor(ms / day));\n  // Remaining hours\n  const hours = this.pad(Math.floor((ms % day) / hour));\n  // Remaining minutes\n  const minutes = this.pad(Math.floor(((ms % day) % hour) / minute));\n  // Remaining seconds\n  const seconds = this.pad(Math.floor((((ms % day) % hour) % minute) / second));\n\n  return { days, hours, minutes, seconds };\n    }\n    pad(value) {\n    return String(value).padStart(2, '0');\n }\n}\n\nconst timer = new Timer({onTick: updateTimerField});\n\nfunction updateTimerField({ days, hours, minutes, seconds }) {\n    days.textContent = `${days}:`;\n    hours.textContent = `${hours}:`;\n    minutes.textContent = `${minutes}:`;\n    seconds.textContent = `${seconds}`;\n }\n\nstartButton.addEventListener('click', timer.start.bind(timer), timer.stop.bind(timer));\n\n// console.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\n// console.log(convertMs(140000)); //{days: 0, hours: 0, minutes: 2, seconds: 20}\n// console.log(convertMs(24140000)); // {days: 0, hours: 6, minutes: 42, seconds: 20}","// Подзадание 1\n// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" через ms миллисекунд.\n// Значением исполнившегося промиса должно быть то кол - во миллисекунд которое передали во время вызова функции delay.\n\nconst delay = ms => {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            resolve(ms);\n        }, ms);\n    });\n};\n\nconst logger = time => console.log(`Fulfilled after ${time}ms`);\n\n// Tests\ndelay(2000).then(logger); // Fulfilled after 2000ms\ndelay(1000).then(logger); // Fulfilled after 1000ms\ndelay(1500).then(logger); // Fulfilled after 1500ms\n\n// Подзадание 2\n// Перепиши функцию toggleUserState() так, чтобы она не использовала callback-функцию callback,\n// а принимала всего два параметра allUsers и username и возвращала промис.\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: false },\n];\n\nconst toggleUserState = (allUsers, username) => {\n    return Promise.resolve(allUsers.map(user =>\n            user.name === username ? { ...user, active: !user.active } : user\n        ));\n};\n\n// Currently the function works like this\n// toggleUserState(users, 'Mango', console.table);\n// toggleUserState(users, 'Ajax', console.table);\n\n// The function should work like this\ntoggleUserState(users, 'Mango').then(console.table);\ntoggleUserState(users, 'Ajax').then(console.table);\n\n// Подзадание 3\n// Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции onSuccess и onError, \n// а принимала всего один параметр transaction и возвращала промис.\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n  const delay = randomIntegerFromInterval(200, 500);\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n    const canProcess = Math.random() > 0.3;\n\n    if (canProcess) {\n      resolve({ id: transaction.id, time: delay });\n    }\n      reject(transaction.id);\n  }, delay);\n  });\n};\n\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n// Currently the function works like this\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n\n// The function should work like this\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);","import './sass/main.scss';\nimport './color-switch';\nimport './timer';\nimport './promisification';"]}