{"version":3,"sources":["color-switch.js","promisification.js","index.js"],"names":["startButton","document","querySelector","stopButton","body","timerId","getRandomHexColor","Math","floor","random","toString","disabled","backgroundColor","style","onClickStart","setInterval","onClickStop","clearInterval","addEventListener","delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","username","map","user","table","randomIntegerFromInterval","min","max","makeTransaction","transaction","id","logSuccess","logError","warn","amount","catch"],"mappings":";;;AAAA,MAAMA,EAAcC,SAASC,cAAc,gBACrCC,EAAaF,SAASC,cAAc,eACpCE,EAAOH,SAASC,cAAc,QACpC,IAAIG,EAAU,KAGd,SAASC,IACC,UAAGC,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBC,SAAS,MAH3DP,EAAWQ,UAAW,EAMtB,MAAMC,EAAkB,IACbR,EAAKS,MAAMD,gBAAkBN,IAGlCQ,EAAe,KACjBT,EAAUU,YAAYH,EAAiB,KACvCT,EAAWQ,UAAW,EACtBX,EAAYW,UAAW,GAGrBK,EAAc,KAChBC,cAAcZ,GACdF,EAAWQ,UAAW,EACtBX,EAAYW,UAAW,GAG3BX,EAAYkB,iBAAiB,QAASJ,GACtCX,EAAWe,iBAAiB,QAASF;;;;ACvBrC,MAAMG,EAAQC,GACH,IAAIC,QAAQ,CAACC,EAASC,KACzBC,WAAW,KACPF,EAAQF,IACTA,KAILK,EAASC,GAAQC,QAAQC,uBAAuBF,OAGtDP,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,MAAMU,KAAKJ,GAMjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,IAGpBC,EAAkB,CAACC,EAAUC,IACxBd,QAAQC,QAAQY,EAASE,IAAIC,GAC5BA,EAAKN,OAASI,EAAW,IAAKE,EAAML,QAASK,EAAKL,QAAWK,IASzEJ,EAAgBH,EAAO,SAASD,KAAKF,QAAQW,OAC7CL,EAAgBH,EAAO,QAAQD,KAAKF,QAAQW,OAM5C,MAAMC,EAA4B,CAACC,EAAKC,IAC/BlC,KAAKC,MAAMD,KAAKE,UAAYgC,EAAMD,EAAM,GAAKA,GAGhDE,EAAmBC,IACjBxB,MAAAA,EAAQoB,EAA0B,IAAK,KACtC,OAAA,IAAIlB,QAAQ,CAACC,EAASC,KAC3BC,WAAW,KACQjB,KAAKE,SAAW,IAGjCa,EAAQ,CAAEsB,GAAID,EAAYC,GAAIlB,KAAMP,IAEpCI,EAAOoB,EAAYC,KACpBzB,MAIC0B,EAAa,EAAGD,GAAAA,EAAIlB,KAAAA,MACxBC,QAAQC,mBAAmBgB,kBAAmBlB,QAG1CoB,EAAWF,IACfjB,QAAQoB,qCAAqCH,+BAQ/CF,EAAgB,CAAEE,GAAI,GAAII,OAAQ,MAAOnB,KAAKgB,GAAYI,MAAMH,GAChEJ,EAAgB,CAAEE,GAAI,GAAII,OAAQ,MAAOnB,KAAKgB,GAAYI,MAAMH;;AC5EhE,aAHA,QAAA,oBACA,QAAA,kBACA,QAAA,WACA,QAAA","file":"src.6a9adeec.js","sourceRoot":"../src","sourcesContent":["const startButton = document.querySelector('[data-start]');\nconst stopButton = document.querySelector('[data-stop]');\nconst body = document.querySelector('body');\nlet timerId = null;\nstopButton.disabled = true;\n\nfunction getRandomHexColor() {\n  return `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n}\n\nconst backgroundColor = () => {\n    return body.style.backgroundColor = getRandomHexColor();\n}\n\nconst onClickStart = () => {\n    timerId = setInterval(backgroundColor, 1000);\n    stopButton.disabled = false;\n    startButton.disabled = true;\n};\n\nconst onClickStop = () => {\n    clearInterval(timerId);\n    stopButton.disabled = true;\n    startButton.disabled = false;\n};\n\nstartButton.addEventListener('click', onClickStart);\nstopButton.addEventListener('click', onClickStop);\n\n","// Подзадание 1\n// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" через ms миллисекунд.\n// Значением исполнившегося промиса должно быть то кол - во миллисекунд которое передали во время вызова функции delay.\n\nconst delay = ms => {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            resolve(ms);\n        }, ms);\n    });\n};\n\nconst logger = time => console.log(`Fulfilled after ${time}ms`);\n\n// Tests\ndelay(2000).then(logger); // Fulfilled after 2000ms\ndelay(1000).then(logger); // Fulfilled after 1000ms\ndelay(1500).then(logger); // Fulfilled after 1500ms\n\n// Подзадание 2\n// Перепиши функцию toggleUserState() так, чтобы она не использовала callback-функцию callback,\n// а принимала всего два параметра allUsers и username и возвращала промис.\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: false },\n];\n\nconst toggleUserState = (allUsers, username) => {\n    return Promise.resolve(allUsers.map(user =>\n            user.name === username ? { ...user, active: !user.active } : user\n        ));\n};\n\n// Currently the function works like this\n// toggleUserState(users, 'Mango', console.table);\n// toggleUserState(users, 'Ajax', console.table);\n\n// The function should work like this\ntoggleUserState(users, 'Mango').then(console.table);\ntoggleUserState(users, 'Ajax').then(console.table);\n\n// Подзадание 3\n// Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции onSuccess и onError, \n// а принимала всего один параметр transaction и возвращала промис.\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n  const delay = randomIntegerFromInterval(200, 500);\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n    const canProcess = Math.random() > 0.3;\n\n    if (canProcess) {\n      resolve({ id: transaction.id, time: delay });\n    }\n      reject(transaction.id);\n  }, delay);\n  });\n};\n\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n// Currently the function works like this\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n\n// The function should work like this\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);","import './sass/main.scss';\nimport './color-switch';\nimport './timer';\nimport './promisification';"]}